//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.8
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from c:\Poc and Personal\QueryLanguage\Query.g4 by ANTLR 4.8

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using Antlr4.Runtime.Misc;
using IParseTreeListener = Antlr4.Runtime.Tree.IParseTreeListener;
using IToken = Antlr4.Runtime.IToken;

/// <summary>
/// This interface defines a complete listener for a parse tree produced by
/// <see cref="QueryParser"/>.
/// </summary>
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.8")]
[System.CLSCompliant(false)]
public interface IQueryListener : IParseTreeListener {
	/// <summary>
	/// Enter a parse tree produced by <see cref="QueryParser.query"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterQuery([NotNull] QueryParser.QueryContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="QueryParser.query"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitQuery([NotNull] QueryParser.QueryContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="QueryParser.select_stmt"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterSelect_stmt([NotNull] QueryParser.Select_stmtContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="QueryParser.select_stmt"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitSelect_stmt([NotNull] QueryParser.Select_stmtContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="QueryParser.from_stmt"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterFrom_stmt([NotNull] QueryParser.From_stmtContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="QueryParser.from_stmt"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitFrom_stmt([NotNull] QueryParser.From_stmtContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="QueryParser.where_stmt"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterWhere_stmt([NotNull] QueryParser.Where_stmtContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="QueryParser.where_stmt"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitWhere_stmt([NotNull] QueryParser.Where_stmtContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="QueryParser.limit_stmt"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterLimit_stmt([NotNull] QueryParser.Limit_stmtContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="QueryParser.limit_stmt"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitLimit_stmt([NotNull] QueryParser.Limit_stmtContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="QueryParser.search_condition"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterSearch_condition([NotNull] QueryParser.Search_conditionContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="QueryParser.search_condition"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitSearch_condition([NotNull] QueryParser.Search_conditionContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="QueryParser.predicate"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterPredicate([NotNull] QueryParser.PredicateContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="QueryParser.predicate"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitPredicate([NotNull] QueryParser.PredicateContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="QueryParser.comparison_predicate"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterComparison_predicate([NotNull] QueryParser.Comparison_predicateContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="QueryParser.comparison_predicate"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitComparison_predicate([NotNull] QueryParser.Comparison_predicateContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="QueryParser.function_predicate"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterFunction_predicate([NotNull] QueryParser.Function_predicateContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="QueryParser.function_predicate"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitFunction_predicate([NotNull] QueryParser.Function_predicateContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="QueryParser.field"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterField([NotNull] QueryParser.FieldContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="QueryParser.field"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitField([NotNull] QueryParser.FieldContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>Equals</c>
	/// labeled alternative in <see cref="QueryParser.comparison_op"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterEquals([NotNull] QueryParser.EqualsContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>Equals</c>
	/// labeled alternative in <see cref="QueryParser.comparison_op"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitEquals([NotNull] QueryParser.EqualsContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>NotEqual</c>
	/// labeled alternative in <see cref="QueryParser.comparison_op"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterNotEqual([NotNull] QueryParser.NotEqualContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>NotEqual</c>
	/// labeled alternative in <see cref="QueryParser.comparison_op"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitNotEqual([NotNull] QueryParser.NotEqualContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="QueryParser.range_op"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterRange_op([NotNull] QueryParser.Range_opContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="QueryParser.range_op"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitRange_op([NotNull] QueryParser.Range_opContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>greaterThanNumber</c>
	/// labeled alternative in <see cref="QueryParser.greater_than"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterGreaterThanNumber([NotNull] QueryParser.GreaterThanNumberContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>greaterThanNumber</c>
	/// labeled alternative in <see cref="QueryParser.greater_than"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitGreaterThanNumber([NotNull] QueryParser.GreaterThanNumberContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>greaterThanTerm</c>
	/// labeled alternative in <see cref="QueryParser.greater_than"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterGreaterThanTerm([NotNull] QueryParser.GreaterThanTermContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>greaterThanTerm</c>
	/// labeled alternative in <see cref="QueryParser.greater_than"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitGreaterThanTerm([NotNull] QueryParser.GreaterThanTermContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>greaterThanEqNumber</c>
	/// labeled alternative in <see cref="QueryParser.greater_than_equals"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterGreaterThanEqNumber([NotNull] QueryParser.GreaterThanEqNumberContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>greaterThanEqNumber</c>
	/// labeled alternative in <see cref="QueryParser.greater_than_equals"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitGreaterThanEqNumber([NotNull] QueryParser.GreaterThanEqNumberContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>greaterThanEqTerm</c>
	/// labeled alternative in <see cref="QueryParser.greater_than_equals"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterGreaterThanEqTerm([NotNull] QueryParser.GreaterThanEqTermContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>greaterThanEqTerm</c>
	/// labeled alternative in <see cref="QueryParser.greater_than_equals"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitGreaterThanEqTerm([NotNull] QueryParser.GreaterThanEqTermContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>lessThanNumber</c>
	/// labeled alternative in <see cref="QueryParser.less_than"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterLessThanNumber([NotNull] QueryParser.LessThanNumberContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>lessThanNumber</c>
	/// labeled alternative in <see cref="QueryParser.less_than"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitLessThanNumber([NotNull] QueryParser.LessThanNumberContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>lessThanTerm</c>
	/// labeled alternative in <see cref="QueryParser.less_than"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterLessThanTerm([NotNull] QueryParser.LessThanTermContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>lessThanTerm</c>
	/// labeled alternative in <see cref="QueryParser.less_than"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitLessThanTerm([NotNull] QueryParser.LessThanTermContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>lessThanEqNumber</c>
	/// labeled alternative in <see cref="QueryParser.less_than_equals"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterLessThanEqNumber([NotNull] QueryParser.LessThanEqNumberContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>lessThanEqNumber</c>
	/// labeled alternative in <see cref="QueryParser.less_than_equals"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitLessThanEqNumber([NotNull] QueryParser.LessThanEqNumberContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>lessThanEqTerm</c>
	/// labeled alternative in <see cref="QueryParser.less_than_equals"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterLessThanEqTerm([NotNull] QueryParser.LessThanEqTermContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>lessThanEqTerm</c>
	/// labeled alternative in <see cref="QueryParser.less_than_equals"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitLessThanEqTerm([NotNull] QueryParser.LessThanEqTermContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>And</c>
	/// labeled alternative in <see cref="QueryParser.boolean_op"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterAnd([NotNull] QueryParser.AndContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>And</c>
	/// labeled alternative in <see cref="QueryParser.boolean_op"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitAnd([NotNull] QueryParser.AndContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>Or</c>
	/// labeled alternative in <see cref="QueryParser.boolean_op"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterOr([NotNull] QueryParser.OrContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>Or</c>
	/// labeled alternative in <see cref="QueryParser.boolean_op"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitOr([NotNull] QueryParser.OrContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="QueryParser.nested_predicate"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterNested_predicate([NotNull] QueryParser.Nested_predicateContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="QueryParser.nested_predicate"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitNested_predicate([NotNull] QueryParser.Nested_predicateContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>Number</c>
	/// labeled alternative in <see cref="QueryParser.value"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterNumber([NotNull] QueryParser.NumberContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>Number</c>
	/// labeled alternative in <see cref="QueryParser.value"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitNumber([NotNull] QueryParser.NumberContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>Term</c>
	/// labeled alternative in <see cref="QueryParser.value"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterTerm([NotNull] QueryParser.TermContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>Term</c>
	/// labeled alternative in <see cref="QueryParser.value"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitTerm([NotNull] QueryParser.TermContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>Phrase</c>
	/// labeled alternative in <see cref="QueryParser.value"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterPhrase([NotNull] QueryParser.PhraseContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>Phrase</c>
	/// labeled alternative in <see cref="QueryParser.value"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitPhrase([NotNull] QueryParser.PhraseContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>Date</c>
	/// labeled alternative in <see cref="QueryParser.value"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterDate([NotNull] QueryParser.DateContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>Date</c>
	/// labeled alternative in <see cref="QueryParser.value"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitDate([NotNull] QueryParser.DateContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>MULTI_PHRASE</c>
	/// labeled alternative in <see cref="QueryParser.value"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterMULTI_PHRASE([NotNull] QueryParser.MULTI_PHRASEContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>MULTI_PHRASE</c>
	/// labeled alternative in <see cref="QueryParser.value"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitMULTI_PHRASE([NotNull] QueryParser.MULTI_PHRASEContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="QueryParser.regexp"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterRegexp([NotNull] QueryParser.RegexpContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="QueryParser.regexp"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitRegexp([NotNull] QueryParser.RegexpContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="QueryParser.like"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterLike([NotNull] QueryParser.LikeContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="QueryParser.like"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitLike([NotNull] QueryParser.LikeContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="QueryParser.in"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterIn([NotNull] QueryParser.InContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="QueryParser.in"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitIn([NotNull] QueryParser.InContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="QueryParser.value_list"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterValue_list([NotNull] QueryParser.Value_listContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="QueryParser.value_list"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitValue_list([NotNull] QueryParser.Value_listContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="QueryParser.number_list"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterNumber_list([NotNull] QueryParser.Number_listContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="QueryParser.number_list"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitNumber_list([NotNull] QueryParser.Number_listContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="QueryParser.date_list"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterDate_list([NotNull] QueryParser.Date_listContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="QueryParser.date_list"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitDate_list([NotNull] QueryParser.Date_listContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="QueryParser.term_list"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterTerm_list([NotNull] QueryParser.Term_listContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="QueryParser.term_list"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitTerm_list([NotNull] QueryParser.Term_listContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="QueryParser.phrase_list"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterPhrase_list([NotNull] QueryParser.Phrase_listContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="QueryParser.phrase_list"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitPhrase_list([NotNull] QueryParser.Phrase_listContext context);
}
