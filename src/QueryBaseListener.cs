//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.8
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from c:\Poc and Personal\QueryLanguage\Query.g4 by ANTLR 4.8

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419


using Antlr4.Runtime.Misc;
using IErrorNode = Antlr4.Runtime.Tree.IErrorNode;
using ITerminalNode = Antlr4.Runtime.Tree.ITerminalNode;
using IToken = Antlr4.Runtime.IToken;
using ParserRuleContext = Antlr4.Runtime.ParserRuleContext;

/// <summary>
/// This class provides an empty implementation of <see cref="IQueryListener"/>,
/// which can be extended to create a listener which only needs to handle a subset
/// of the available methods.
/// </summary>
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.8")]
[System.CLSCompliant(false)]
public partial class QueryBaseListener : IQueryListener {
	/// <summary>
	/// Enter a parse tree produced by <see cref="QueryParser.query"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterQuery([NotNull] QueryParser.QueryContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="QueryParser.query"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitQuery([NotNull] QueryParser.QueryContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="QueryParser.select_stmt"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterSelect_stmt([NotNull] QueryParser.Select_stmtContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="QueryParser.select_stmt"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitSelect_stmt([NotNull] QueryParser.Select_stmtContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="QueryParser.from_stmt"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterFrom_stmt([NotNull] QueryParser.From_stmtContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="QueryParser.from_stmt"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitFrom_stmt([NotNull] QueryParser.From_stmtContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="QueryParser.where_stmt"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterWhere_stmt([NotNull] QueryParser.Where_stmtContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="QueryParser.where_stmt"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitWhere_stmt([NotNull] QueryParser.Where_stmtContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="QueryParser.limit_stmt"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterLimit_stmt([NotNull] QueryParser.Limit_stmtContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="QueryParser.limit_stmt"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitLimit_stmt([NotNull] QueryParser.Limit_stmtContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="QueryParser.search_condition"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterSearch_condition([NotNull] QueryParser.Search_conditionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="QueryParser.search_condition"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitSearch_condition([NotNull] QueryParser.Search_conditionContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="QueryParser.predicate"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterPredicate([NotNull] QueryParser.PredicateContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="QueryParser.predicate"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitPredicate([NotNull] QueryParser.PredicateContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="QueryParser.comparison_predicate"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterComparison_predicate([NotNull] QueryParser.Comparison_predicateContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="QueryParser.comparison_predicate"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitComparison_predicate([NotNull] QueryParser.Comparison_predicateContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="QueryParser.function_predicate"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterFunction_predicate([NotNull] QueryParser.Function_predicateContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="QueryParser.function_predicate"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitFunction_predicate([NotNull] QueryParser.Function_predicateContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="QueryParser.field"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterField([NotNull] QueryParser.FieldContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="QueryParser.field"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitField([NotNull] QueryParser.FieldContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>Equals</c>
	/// labeled alternative in <see cref="QueryParser.comparison_op"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterEquals([NotNull] QueryParser.EqualsContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>Equals</c>
	/// labeled alternative in <see cref="QueryParser.comparison_op"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitEquals([NotNull] QueryParser.EqualsContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>NotEqual</c>
	/// labeled alternative in <see cref="QueryParser.comparison_op"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterNotEqual([NotNull] QueryParser.NotEqualContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>NotEqual</c>
	/// labeled alternative in <see cref="QueryParser.comparison_op"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitNotEqual([NotNull] QueryParser.NotEqualContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="QueryParser.range_op"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterRange_op([NotNull] QueryParser.Range_opContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="QueryParser.range_op"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitRange_op([NotNull] QueryParser.Range_opContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>greaterThanNumber</c>
	/// labeled alternative in <see cref="QueryParser.greater_than"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterGreaterThanNumber([NotNull] QueryParser.GreaterThanNumberContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>greaterThanNumber</c>
	/// labeled alternative in <see cref="QueryParser.greater_than"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitGreaterThanNumber([NotNull] QueryParser.GreaterThanNumberContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>greaterThanTerm</c>
	/// labeled alternative in <see cref="QueryParser.greater_than"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterGreaterThanTerm([NotNull] QueryParser.GreaterThanTermContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>greaterThanTerm</c>
	/// labeled alternative in <see cref="QueryParser.greater_than"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitGreaterThanTerm([NotNull] QueryParser.GreaterThanTermContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>greaterThanEqNumber</c>
	/// labeled alternative in <see cref="QueryParser.greater_than_equals"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterGreaterThanEqNumber([NotNull] QueryParser.GreaterThanEqNumberContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>greaterThanEqNumber</c>
	/// labeled alternative in <see cref="QueryParser.greater_than_equals"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitGreaterThanEqNumber([NotNull] QueryParser.GreaterThanEqNumberContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>greaterThanEqTerm</c>
	/// labeled alternative in <see cref="QueryParser.greater_than_equals"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterGreaterThanEqTerm([NotNull] QueryParser.GreaterThanEqTermContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>greaterThanEqTerm</c>
	/// labeled alternative in <see cref="QueryParser.greater_than_equals"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitGreaterThanEqTerm([NotNull] QueryParser.GreaterThanEqTermContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>lessThanNumber</c>
	/// labeled alternative in <see cref="QueryParser.less_than"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterLessThanNumber([NotNull] QueryParser.LessThanNumberContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>lessThanNumber</c>
	/// labeled alternative in <see cref="QueryParser.less_than"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitLessThanNumber([NotNull] QueryParser.LessThanNumberContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>lessThanTerm</c>
	/// labeled alternative in <see cref="QueryParser.less_than"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterLessThanTerm([NotNull] QueryParser.LessThanTermContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>lessThanTerm</c>
	/// labeled alternative in <see cref="QueryParser.less_than"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitLessThanTerm([NotNull] QueryParser.LessThanTermContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>lessThanEqNumber</c>
	/// labeled alternative in <see cref="QueryParser.less_than_equals"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterLessThanEqNumber([NotNull] QueryParser.LessThanEqNumberContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>lessThanEqNumber</c>
	/// labeled alternative in <see cref="QueryParser.less_than_equals"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitLessThanEqNumber([NotNull] QueryParser.LessThanEqNumberContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>lessThanEqTerm</c>
	/// labeled alternative in <see cref="QueryParser.less_than_equals"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterLessThanEqTerm([NotNull] QueryParser.LessThanEqTermContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>lessThanEqTerm</c>
	/// labeled alternative in <see cref="QueryParser.less_than_equals"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitLessThanEqTerm([NotNull] QueryParser.LessThanEqTermContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>And</c>
	/// labeled alternative in <see cref="QueryParser.boolean_op"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterAnd([NotNull] QueryParser.AndContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>And</c>
	/// labeled alternative in <see cref="QueryParser.boolean_op"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitAnd([NotNull] QueryParser.AndContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>Or</c>
	/// labeled alternative in <see cref="QueryParser.boolean_op"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterOr([NotNull] QueryParser.OrContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>Or</c>
	/// labeled alternative in <see cref="QueryParser.boolean_op"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitOr([NotNull] QueryParser.OrContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="QueryParser.nested_predicate"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterNested_predicate([NotNull] QueryParser.Nested_predicateContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="QueryParser.nested_predicate"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitNested_predicate([NotNull] QueryParser.Nested_predicateContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>Number</c>
	/// labeled alternative in <see cref="QueryParser.value"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterNumber([NotNull] QueryParser.NumberContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>Number</c>
	/// labeled alternative in <see cref="QueryParser.value"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitNumber([NotNull] QueryParser.NumberContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>Term</c>
	/// labeled alternative in <see cref="QueryParser.value"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterTerm([NotNull] QueryParser.TermContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>Term</c>
	/// labeled alternative in <see cref="QueryParser.value"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitTerm([NotNull] QueryParser.TermContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>Phrase</c>
	/// labeled alternative in <see cref="QueryParser.value"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterPhrase([NotNull] QueryParser.PhraseContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>Phrase</c>
	/// labeled alternative in <see cref="QueryParser.value"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitPhrase([NotNull] QueryParser.PhraseContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>Date</c>
	/// labeled alternative in <see cref="QueryParser.value"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterDate([NotNull] QueryParser.DateContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>Date</c>
	/// labeled alternative in <see cref="QueryParser.value"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitDate([NotNull] QueryParser.DateContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>MULTI_PHRASE</c>
	/// labeled alternative in <see cref="QueryParser.value"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterMULTI_PHRASE([NotNull] QueryParser.MULTI_PHRASEContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>MULTI_PHRASE</c>
	/// labeled alternative in <see cref="QueryParser.value"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitMULTI_PHRASE([NotNull] QueryParser.MULTI_PHRASEContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="QueryParser.regexp"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterRegexp([NotNull] QueryParser.RegexpContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="QueryParser.regexp"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitRegexp([NotNull] QueryParser.RegexpContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="QueryParser.like"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterLike([NotNull] QueryParser.LikeContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="QueryParser.like"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitLike([NotNull] QueryParser.LikeContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="QueryParser.in"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterIn([NotNull] QueryParser.InContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="QueryParser.in"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitIn([NotNull] QueryParser.InContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="QueryParser.value_list"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterValue_list([NotNull] QueryParser.Value_listContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="QueryParser.value_list"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitValue_list([NotNull] QueryParser.Value_listContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="QueryParser.number_list"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterNumber_list([NotNull] QueryParser.Number_listContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="QueryParser.number_list"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitNumber_list([NotNull] QueryParser.Number_listContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="QueryParser.date_list"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterDate_list([NotNull] QueryParser.Date_listContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="QueryParser.date_list"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitDate_list([NotNull] QueryParser.Date_listContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="QueryParser.term_list"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterTerm_list([NotNull] QueryParser.Term_listContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="QueryParser.term_list"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitTerm_list([NotNull] QueryParser.Term_listContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="QueryParser.phrase_list"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterPhrase_list([NotNull] QueryParser.Phrase_listContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="QueryParser.phrase_list"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitPhrase_list([NotNull] QueryParser.Phrase_listContext context) { }

	/// <inheritdoc/>
	/// <remarks>The default implementation does nothing.</remarks>
	public virtual void EnterEveryRule([NotNull] ParserRuleContext context) { }
	/// <inheritdoc/>
	/// <remarks>The default implementation does nothing.</remarks>
	public virtual void ExitEveryRule([NotNull] ParserRuleContext context) { }
	/// <inheritdoc/>
	/// <remarks>The default implementation does nothing.</remarks>
	public virtual void VisitTerminal([NotNull] ITerminalNode node) { }
	/// <inheritdoc/>
	/// <remarks>The default implementation does nothing.</remarks>
	public virtual void VisitErrorNode([NotNull] IErrorNode node) { }
}
