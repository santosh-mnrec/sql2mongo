//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.8
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from c:\Poc and Personal\QueryLanguage\Query.g4 by ANTLR 4.8

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.8")]
[System.CLSCompliant(false)]
public partial class QueryParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		SELECT=1, FROM=2, WHERE=3, AND=4, OR=5, NOT=6, DESCRIBE=7, MATCHES=8, 
		LIKE=9, LIMIT=10, EQ=11, NE=12, GT=13, LT=14, GTE=15, LTE=16, IN=17, STAR=18, 
		NUMBER=19, DATE=20, FIELD=21, PATH=22, TERM=23, PHRASE=24, WILD_CARD=25, 
		MULTI_PHRASE=26, DB_QUOTE_STRING_LIT=27, COMMA=28, LPAREN=29, RPAREN=30, 
		WS=31;
	public const int
		RULE_query = 0, RULE_select_stmt = 1, RULE_from_stmt = 2, RULE_where_stmt = 3, 
		RULE_limit_stmt = 4, RULE_search_condition = 5, RULE_predicate = 6, RULE_comparison_predicate = 7, 
		RULE_function_predicate = 8, RULE_field = 9, RULE_comparison_op = 10, 
		RULE_range_op = 11, RULE_greater_than = 12, RULE_greater_than_equals = 13, 
		RULE_less_than = 14, RULE_less_than_equals = 15, RULE_boolean_op = 16, 
		RULE_nested_predicate = 17, RULE_value = 18, RULE_regexp = 19, RULE_like = 20, 
		RULE_in = 21, RULE_value_list = 22, RULE_number_list = 23, RULE_date_list = 24, 
		RULE_term_list = 25, RULE_phrase_list = 26;
	public static readonly string[] ruleNames = {
		"query", "select_stmt", "from_stmt", "where_stmt", "limit_stmt", "search_condition", 
		"predicate", "comparison_predicate", "function_predicate", "field", "comparison_op", 
		"range_op", "greater_than", "greater_than_equals", "less_than", "less_than_equals", 
		"boolean_op", "nested_predicate", "value", "regexp", "like", "in", "value_list", 
		"number_list", "date_list", "term_list", "phrase_list"
	};

	private static readonly string[] _LiteralNames = {
		null, null, null, null, null, null, null, null, null, null, null, "'='", 
		"'!='", "'>'", "'<'", "'>='", "'<='", null, "'*'", null, null, null, null, 
		null, null, null, null, null, "','", "'('", "')'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "SELECT", "FROM", "WHERE", "AND", "OR", "NOT", "DESCRIBE", "MATCHES", 
		"LIKE", "LIMIT", "EQ", "NE", "GT", "LT", "GTE", "LTE", "IN", "STAR", "NUMBER", 
		"DATE", "FIELD", "PATH", "TERM", "PHRASE", "WILD_CARD", "MULTI_PHRASE", 
		"DB_QUOTE_STRING_LIT", "COMMA", "LPAREN", "RPAREN", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Query.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static QueryParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public QueryParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public QueryParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class QueryContext : ParserRuleContext {
		public Where_stmtContext where_stmt() {
			return GetRuleContext<Where_stmtContext>(0);
		}
		public Select_stmtContext select_stmt() {
			return GetRuleContext<Select_stmtContext>(0);
		}
		public From_stmtContext from_stmt() {
			return GetRuleContext<From_stmtContext>(0);
		}
		public Limit_stmtContext limit_stmt() {
			return GetRuleContext<Limit_stmtContext>(0);
		}
		public QueryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_query; } }
		public override void EnterRule(IParseTreeListener listener) {
			IQueryListener typedListener = listener as IQueryListener;
			if (typedListener != null) typedListener.EnterQuery(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IQueryListener typedListener = listener as IQueryListener;
			if (typedListener != null) typedListener.ExitQuery(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryVisitor<TResult> typedVisitor = visitor as IQueryVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQuery(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public QueryContext query() {
		QueryContext _localctx = new QueryContext(Context, State);
		EnterRule(_localctx, 0, RULE_query);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 55;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==SELECT) {
				{
				State = 54; select_stmt();
				}
			}

			State = 58;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==FROM) {
				{
				State = 57; from_stmt();
				}
			}

			State = 60; where_stmt();
			State = 62;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LIMIT) {
				{
				State = 61; limit_stmt();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Select_stmtContext : ParserRuleContext {
		public ITerminalNode SELECT() { return GetToken(QueryParser.SELECT, 0); }
		public ITerminalNode STAR() { return GetToken(QueryParser.STAR, 0); }
		public ITerminalNode[] FIELD() { return GetTokens(QueryParser.FIELD); }
		public ITerminalNode FIELD(int i) {
			return GetToken(QueryParser.FIELD, i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(QueryParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(QueryParser.COMMA, i);
		}
		public Select_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_select_stmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IQueryListener typedListener = listener as IQueryListener;
			if (typedListener != null) typedListener.EnterSelect_stmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IQueryListener typedListener = listener as IQueryListener;
			if (typedListener != null) typedListener.ExitSelect_stmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryVisitor<TResult> typedVisitor = visitor as IQueryVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelect_stmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Select_stmtContext select_stmt() {
		Select_stmtContext _localctx = new Select_stmtContext(Context, State);
		EnterRule(_localctx, 2, RULE_select_stmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 64; Match(SELECT);
			State = 74;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case STAR:
				{
				State = 65; Match(STAR);
				}
				break;
			case FIELD:
				{
				{
				State = 66; Match(FIELD);
				State = 71;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 67; Match(COMMA);
					State = 68; Match(FIELD);
					}
					}
					State = 73;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class From_stmtContext : ParserRuleContext {
		public ITerminalNode FROM() { return GetToken(QueryParser.FROM, 0); }
		public ITerminalNode PATH() { return GetToken(QueryParser.PATH, 0); }
		public From_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_from_stmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IQueryListener typedListener = listener as IQueryListener;
			if (typedListener != null) typedListener.EnterFrom_stmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IQueryListener typedListener = listener as IQueryListener;
			if (typedListener != null) typedListener.ExitFrom_stmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryVisitor<TResult> typedVisitor = visitor as IQueryVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFrom_stmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public From_stmtContext from_stmt() {
		From_stmtContext _localctx = new From_stmtContext(Context, State);
		EnterRule(_localctx, 4, RULE_from_stmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 76; Match(FROM);
			State = 77; Match(PATH);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Where_stmtContext : ParserRuleContext {
		public ITerminalNode WHERE() { return GetToken(QueryParser.WHERE, 0); }
		public Search_conditionContext[] search_condition() {
			return GetRuleContexts<Search_conditionContext>();
		}
		public Search_conditionContext search_condition(int i) {
			return GetRuleContext<Search_conditionContext>(i);
		}
		public Where_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_where_stmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IQueryListener typedListener = listener as IQueryListener;
			if (typedListener != null) typedListener.EnterWhere_stmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IQueryListener typedListener = listener as IQueryListener;
			if (typedListener != null) typedListener.ExitWhere_stmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryVisitor<TResult> typedVisitor = visitor as IQueryVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhere_stmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Where_stmtContext where_stmt() {
		Where_stmtContext _localctx = new Where_stmtContext(Context, State);
		EnterRule(_localctx, 6, RULE_where_stmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 79; Match(WHERE);
			State = 81;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 80; search_condition();
				}
				}
				State = 83;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << AND) | (1L << OR) | (1L << FIELD))) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Limit_stmtContext : ParserRuleContext {
		public ITerminalNode LIMIT() { return GetToken(QueryParser.LIMIT, 0); }
		public ITerminalNode NUMBER() { return GetToken(QueryParser.NUMBER, 0); }
		public Limit_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_limit_stmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IQueryListener typedListener = listener as IQueryListener;
			if (typedListener != null) typedListener.EnterLimit_stmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IQueryListener typedListener = listener as IQueryListener;
			if (typedListener != null) typedListener.ExitLimit_stmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryVisitor<TResult> typedVisitor = visitor as IQueryVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLimit_stmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Limit_stmtContext limit_stmt() {
		Limit_stmtContext _localctx = new Limit_stmtContext(Context, State);
		EnterRule(_localctx, 8, RULE_limit_stmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 85; Match(LIMIT);
			State = 86; Match(NUMBER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Search_conditionContext : ParserRuleContext {
		public PredicateContext[] predicate() {
			return GetRuleContexts<PredicateContext>();
		}
		public PredicateContext predicate(int i) {
			return GetRuleContext<PredicateContext>(i);
		}
		public Nested_predicateContext[] nested_predicate() {
			return GetRuleContexts<Nested_predicateContext>();
		}
		public Nested_predicateContext nested_predicate(int i) {
			return GetRuleContext<Nested_predicateContext>(i);
		}
		public Search_conditionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_search_condition; } }
		public override void EnterRule(IParseTreeListener listener) {
			IQueryListener typedListener = listener as IQueryListener;
			if (typedListener != null) typedListener.EnterSearch_condition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IQueryListener typedListener = listener as IQueryListener;
			if (typedListener != null) typedListener.ExitSearch_condition(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryVisitor<TResult> typedVisitor = visitor as IQueryVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSearch_condition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Search_conditionContext search_condition() {
		Search_conditionContext _localctx = new Search_conditionContext(Context, State);
		EnterRule(_localctx, 10, RULE_search_condition);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 88; predicate();
			State = 93;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,7,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					State = 91;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,6,Context) ) {
					case 1:
						{
						State = 89; predicate();
						}
						break;
					case 2:
						{
						State = 90; nested_predicate();
						}
						break;
					}
					} 
				}
				State = 95;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,7,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PredicateContext : ParserRuleContext {
		public Comparison_predicateContext comparison_predicate() {
			return GetRuleContext<Comparison_predicateContext>(0);
		}
		public Function_predicateContext function_predicate() {
			return GetRuleContext<Function_predicateContext>(0);
		}
		public Boolean_opContext boolean_op() {
			return GetRuleContext<Boolean_opContext>(0);
		}
		public PredicateContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_predicate; } }
		public override void EnterRule(IParseTreeListener listener) {
			IQueryListener typedListener = listener as IQueryListener;
			if (typedListener != null) typedListener.EnterPredicate(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IQueryListener typedListener = listener as IQueryListener;
			if (typedListener != null) typedListener.ExitPredicate(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryVisitor<TResult> typedVisitor = visitor as IQueryVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPredicate(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PredicateContext predicate() {
		PredicateContext _localctx = new PredicateContext(Context, State);
		EnterRule(_localctx, 12, RULE_predicate);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 97;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==AND || _la==OR) {
				{
				State = 96; boolean_op();
				}
			}

			State = 101;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,9,Context) ) {
			case 1:
				{
				State = 99; comparison_predicate();
				}
				break;
			case 2:
				{
				State = 100; function_predicate();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Comparison_predicateContext : ParserRuleContext {
		public FieldContext field() {
			return GetRuleContext<FieldContext>(0);
		}
		public Comparison_opContext comparison_op() {
			return GetRuleContext<Comparison_opContext>(0);
		}
		public ValueContext value() {
			return GetRuleContext<ValueContext>(0);
		}
		public Range_opContext range_op() {
			return GetRuleContext<Range_opContext>(0);
		}
		public Comparison_predicateContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_comparison_predicate; } }
		public override void EnterRule(IParseTreeListener listener) {
			IQueryListener typedListener = listener as IQueryListener;
			if (typedListener != null) typedListener.EnterComparison_predicate(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IQueryListener typedListener = listener as IQueryListener;
			if (typedListener != null) typedListener.ExitComparison_predicate(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryVisitor<TResult> typedVisitor = visitor as IQueryVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComparison_predicate(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Comparison_predicateContext comparison_predicate() {
		Comparison_predicateContext _localctx = new Comparison_predicateContext(Context, State);
		EnterRule(_localctx, 14, RULE_comparison_predicate);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 103; field();
			State = 108;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case EQ:
			case NE:
				{
				State = 104; comparison_op();
				State = 105; value();
				}
				break;
			case GT:
			case LT:
			case GTE:
			case LTE:
				{
				State = 107; range_op();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Function_predicateContext : ParserRuleContext {
		public RegexpContext regexp() {
			return GetRuleContext<RegexpContext>(0);
		}
		public LikeContext like() {
			return GetRuleContext<LikeContext>(0);
		}
		public InContext @in() {
			return GetRuleContext<InContext>(0);
		}
		public Function_predicateContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_function_predicate; } }
		public override void EnterRule(IParseTreeListener listener) {
			IQueryListener typedListener = listener as IQueryListener;
			if (typedListener != null) typedListener.EnterFunction_predicate(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IQueryListener typedListener = listener as IQueryListener;
			if (typedListener != null) typedListener.ExitFunction_predicate(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryVisitor<TResult> typedVisitor = visitor as IQueryVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunction_predicate(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Function_predicateContext function_predicate() {
		Function_predicateContext _localctx = new Function_predicateContext(Context, State);
		EnterRule(_localctx, 16, RULE_function_predicate);
		try {
			State = 113;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,11,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 110; regexp();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 111; like();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 112; @in();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FieldContext : ParserRuleContext {
		public ITerminalNode FIELD() { return GetToken(QueryParser.FIELD, 0); }
		public FieldContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_field; } }
		public override void EnterRule(IParseTreeListener listener) {
			IQueryListener typedListener = listener as IQueryListener;
			if (typedListener != null) typedListener.EnterField(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IQueryListener typedListener = listener as IQueryListener;
			if (typedListener != null) typedListener.ExitField(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryVisitor<TResult> typedVisitor = visitor as IQueryVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitField(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FieldContext field() {
		FieldContext _localctx = new FieldContext(Context, State);
		EnterRule(_localctx, 18, RULE_field);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 115; Match(FIELD);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Comparison_opContext : ParserRuleContext {
		public Comparison_opContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_comparison_op; } }
	 
		public Comparison_opContext() { }
		public virtual void CopyFrom(Comparison_opContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class EqualsContext : Comparison_opContext {
		public ITerminalNode EQ() { return GetToken(QueryParser.EQ, 0); }
		public EqualsContext(Comparison_opContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IQueryListener typedListener = listener as IQueryListener;
			if (typedListener != null) typedListener.EnterEquals(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IQueryListener typedListener = listener as IQueryListener;
			if (typedListener != null) typedListener.ExitEquals(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryVisitor<TResult> typedVisitor = visitor as IQueryVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEquals(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NotEqualContext : Comparison_opContext {
		public ITerminalNode NE() { return GetToken(QueryParser.NE, 0); }
		public NotEqualContext(Comparison_opContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IQueryListener typedListener = listener as IQueryListener;
			if (typedListener != null) typedListener.EnterNotEqual(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IQueryListener typedListener = listener as IQueryListener;
			if (typedListener != null) typedListener.ExitNotEqual(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryVisitor<TResult> typedVisitor = visitor as IQueryVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNotEqual(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Comparison_opContext comparison_op() {
		Comparison_opContext _localctx = new Comparison_opContext(Context, State);
		EnterRule(_localctx, 20, RULE_comparison_op);
		try {
			State = 119;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case EQ:
				_localctx = new EqualsContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 117; Match(EQ);
				}
				break;
			case NE:
				_localctx = new NotEqualContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 118; Match(NE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Range_opContext : ParserRuleContext {
		public Greater_thanContext greater_than() {
			return GetRuleContext<Greater_thanContext>(0);
		}
		public Greater_than_equalsContext greater_than_equals() {
			return GetRuleContext<Greater_than_equalsContext>(0);
		}
		public Less_thanContext less_than() {
			return GetRuleContext<Less_thanContext>(0);
		}
		public Less_than_equalsContext less_than_equals() {
			return GetRuleContext<Less_than_equalsContext>(0);
		}
		public Range_opContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_range_op; } }
		public override void EnterRule(IParseTreeListener listener) {
			IQueryListener typedListener = listener as IQueryListener;
			if (typedListener != null) typedListener.EnterRange_op(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IQueryListener typedListener = listener as IQueryListener;
			if (typedListener != null) typedListener.ExitRange_op(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryVisitor<TResult> typedVisitor = visitor as IQueryVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRange_op(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Range_opContext range_op() {
		Range_opContext _localctx = new Range_opContext(Context, State);
		EnterRule(_localctx, 22, RULE_range_op);
		try {
			State = 125;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case GT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 121; greater_than();
				}
				break;
			case GTE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 122; greater_than_equals();
				}
				break;
			case LT:
				EnterOuterAlt(_localctx, 3);
				{
				State = 123; less_than();
				}
				break;
			case LTE:
				EnterOuterAlt(_localctx, 4);
				{
				State = 124; less_than_equals();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Greater_thanContext : ParserRuleContext {
		public Greater_thanContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_greater_than; } }
	 
		public Greater_thanContext() { }
		public virtual void CopyFrom(Greater_thanContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class GreaterThanTermContext : Greater_thanContext {
		public ITerminalNode GT() { return GetToken(QueryParser.GT, 0); }
		public ITerminalNode TERM() { return GetToken(QueryParser.TERM, 0); }
		public GreaterThanTermContext(Greater_thanContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IQueryListener typedListener = listener as IQueryListener;
			if (typedListener != null) typedListener.EnterGreaterThanTerm(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IQueryListener typedListener = listener as IQueryListener;
			if (typedListener != null) typedListener.ExitGreaterThanTerm(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryVisitor<TResult> typedVisitor = visitor as IQueryVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGreaterThanTerm(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class GreaterThanNumberContext : Greater_thanContext {
		public ITerminalNode GT() { return GetToken(QueryParser.GT, 0); }
		public ITerminalNode NUMBER() { return GetToken(QueryParser.NUMBER, 0); }
		public GreaterThanNumberContext(Greater_thanContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IQueryListener typedListener = listener as IQueryListener;
			if (typedListener != null) typedListener.EnterGreaterThanNumber(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IQueryListener typedListener = listener as IQueryListener;
			if (typedListener != null) typedListener.ExitGreaterThanNumber(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryVisitor<TResult> typedVisitor = visitor as IQueryVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGreaterThanNumber(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Greater_thanContext greater_than() {
		Greater_thanContext _localctx = new Greater_thanContext(Context, State);
		EnterRule(_localctx, 24, RULE_greater_than);
		try {
			State = 131;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,14,Context) ) {
			case 1:
				_localctx = new GreaterThanNumberContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 127; Match(GT);
				State = 128; Match(NUMBER);
				}
				break;
			case 2:
				_localctx = new GreaterThanTermContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 129; Match(GT);
				State = 130; Match(TERM);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Greater_than_equalsContext : ParserRuleContext {
		public Greater_than_equalsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_greater_than_equals; } }
	 
		public Greater_than_equalsContext() { }
		public virtual void CopyFrom(Greater_than_equalsContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class GreaterThanEqNumberContext : Greater_than_equalsContext {
		public ITerminalNode GTE() { return GetToken(QueryParser.GTE, 0); }
		public ITerminalNode NUMBER() { return GetToken(QueryParser.NUMBER, 0); }
		public GreaterThanEqNumberContext(Greater_than_equalsContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IQueryListener typedListener = listener as IQueryListener;
			if (typedListener != null) typedListener.EnterGreaterThanEqNumber(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IQueryListener typedListener = listener as IQueryListener;
			if (typedListener != null) typedListener.ExitGreaterThanEqNumber(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryVisitor<TResult> typedVisitor = visitor as IQueryVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGreaterThanEqNumber(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class GreaterThanEqTermContext : Greater_than_equalsContext {
		public ITerminalNode GTE() { return GetToken(QueryParser.GTE, 0); }
		public ITerminalNode TERM() { return GetToken(QueryParser.TERM, 0); }
		public GreaterThanEqTermContext(Greater_than_equalsContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IQueryListener typedListener = listener as IQueryListener;
			if (typedListener != null) typedListener.EnterGreaterThanEqTerm(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IQueryListener typedListener = listener as IQueryListener;
			if (typedListener != null) typedListener.ExitGreaterThanEqTerm(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryVisitor<TResult> typedVisitor = visitor as IQueryVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGreaterThanEqTerm(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Greater_than_equalsContext greater_than_equals() {
		Greater_than_equalsContext _localctx = new Greater_than_equalsContext(Context, State);
		EnterRule(_localctx, 26, RULE_greater_than_equals);
		try {
			State = 137;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,15,Context) ) {
			case 1:
				_localctx = new GreaterThanEqNumberContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 133; Match(GTE);
				State = 134; Match(NUMBER);
				}
				break;
			case 2:
				_localctx = new GreaterThanEqTermContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 135; Match(GTE);
				State = 136; Match(TERM);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Less_thanContext : ParserRuleContext {
		public Less_thanContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_less_than; } }
	 
		public Less_thanContext() { }
		public virtual void CopyFrom(Less_thanContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class LessThanTermContext : Less_thanContext {
		public ITerminalNode LT() { return GetToken(QueryParser.LT, 0); }
		public ITerminalNode TERM() { return GetToken(QueryParser.TERM, 0); }
		public LessThanTermContext(Less_thanContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IQueryListener typedListener = listener as IQueryListener;
			if (typedListener != null) typedListener.EnterLessThanTerm(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IQueryListener typedListener = listener as IQueryListener;
			if (typedListener != null) typedListener.ExitLessThanTerm(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryVisitor<TResult> typedVisitor = visitor as IQueryVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLessThanTerm(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LessThanNumberContext : Less_thanContext {
		public ITerminalNode LT() { return GetToken(QueryParser.LT, 0); }
		public ITerminalNode NUMBER() { return GetToken(QueryParser.NUMBER, 0); }
		public LessThanNumberContext(Less_thanContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IQueryListener typedListener = listener as IQueryListener;
			if (typedListener != null) typedListener.EnterLessThanNumber(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IQueryListener typedListener = listener as IQueryListener;
			if (typedListener != null) typedListener.ExitLessThanNumber(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryVisitor<TResult> typedVisitor = visitor as IQueryVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLessThanNumber(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Less_thanContext less_than() {
		Less_thanContext _localctx = new Less_thanContext(Context, State);
		EnterRule(_localctx, 28, RULE_less_than);
		try {
			State = 143;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,16,Context) ) {
			case 1:
				_localctx = new LessThanNumberContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 139; Match(LT);
				State = 140; Match(NUMBER);
				}
				break;
			case 2:
				_localctx = new LessThanTermContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 141; Match(LT);
				State = 142; Match(TERM);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Less_than_equalsContext : ParserRuleContext {
		public Less_than_equalsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_less_than_equals; } }
	 
		public Less_than_equalsContext() { }
		public virtual void CopyFrom(Less_than_equalsContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class LessThanEqTermContext : Less_than_equalsContext {
		public ITerminalNode LTE() { return GetToken(QueryParser.LTE, 0); }
		public ITerminalNode TERM() { return GetToken(QueryParser.TERM, 0); }
		public LessThanEqTermContext(Less_than_equalsContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IQueryListener typedListener = listener as IQueryListener;
			if (typedListener != null) typedListener.EnterLessThanEqTerm(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IQueryListener typedListener = listener as IQueryListener;
			if (typedListener != null) typedListener.ExitLessThanEqTerm(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryVisitor<TResult> typedVisitor = visitor as IQueryVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLessThanEqTerm(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LessThanEqNumberContext : Less_than_equalsContext {
		public ITerminalNode LTE() { return GetToken(QueryParser.LTE, 0); }
		public ITerminalNode NUMBER() { return GetToken(QueryParser.NUMBER, 0); }
		public LessThanEqNumberContext(Less_than_equalsContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IQueryListener typedListener = listener as IQueryListener;
			if (typedListener != null) typedListener.EnterLessThanEqNumber(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IQueryListener typedListener = listener as IQueryListener;
			if (typedListener != null) typedListener.ExitLessThanEqNumber(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryVisitor<TResult> typedVisitor = visitor as IQueryVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLessThanEqNumber(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Less_than_equalsContext less_than_equals() {
		Less_than_equalsContext _localctx = new Less_than_equalsContext(Context, State);
		EnterRule(_localctx, 30, RULE_less_than_equals);
		try {
			State = 149;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,17,Context) ) {
			case 1:
				_localctx = new LessThanEqNumberContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 145; Match(LTE);
				State = 146; Match(NUMBER);
				}
				break;
			case 2:
				_localctx = new LessThanEqTermContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 147; Match(LTE);
				State = 148; Match(TERM);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Boolean_opContext : ParserRuleContext {
		public Boolean_opContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_boolean_op; } }
	 
		public Boolean_opContext() { }
		public virtual void CopyFrom(Boolean_opContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class OrContext : Boolean_opContext {
		public ITerminalNode OR() { return GetToken(QueryParser.OR, 0); }
		public OrContext(Boolean_opContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IQueryListener typedListener = listener as IQueryListener;
			if (typedListener != null) typedListener.EnterOr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IQueryListener typedListener = listener as IQueryListener;
			if (typedListener != null) typedListener.ExitOr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryVisitor<TResult> typedVisitor = visitor as IQueryVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AndContext : Boolean_opContext {
		public ITerminalNode AND() { return GetToken(QueryParser.AND, 0); }
		public AndContext(Boolean_opContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IQueryListener typedListener = listener as IQueryListener;
			if (typedListener != null) typedListener.EnterAnd(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IQueryListener typedListener = listener as IQueryListener;
			if (typedListener != null) typedListener.ExitAnd(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryVisitor<TResult> typedVisitor = visitor as IQueryVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAnd(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Boolean_opContext boolean_op() {
		Boolean_opContext _localctx = new Boolean_opContext(Context, State);
		EnterRule(_localctx, 32, RULE_boolean_op);
		try {
			State = 153;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case AND:
				_localctx = new AndContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 151; Match(AND);
				}
				break;
			case OR:
				_localctx = new OrContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 152; Match(OR);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Nested_predicateContext : ParserRuleContext {
		public ITerminalNode LPAREN() { return GetToken(QueryParser.LPAREN, 0); }
		public PredicateContext[] predicate() {
			return GetRuleContexts<PredicateContext>();
		}
		public PredicateContext predicate(int i) {
			return GetRuleContext<PredicateContext>(i);
		}
		public ITerminalNode RPAREN() { return GetToken(QueryParser.RPAREN, 0); }
		public Boolean_opContext boolean_op() {
			return GetRuleContext<Boolean_opContext>(0);
		}
		public Nested_predicateContext[] nested_predicate() {
			return GetRuleContexts<Nested_predicateContext>();
		}
		public Nested_predicateContext nested_predicate(int i) {
			return GetRuleContext<Nested_predicateContext>(i);
		}
		public Nested_predicateContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nested_predicate; } }
		public override void EnterRule(IParseTreeListener listener) {
			IQueryListener typedListener = listener as IQueryListener;
			if (typedListener != null) typedListener.EnterNested_predicate(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IQueryListener typedListener = listener as IQueryListener;
			if (typedListener != null) typedListener.ExitNested_predicate(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryVisitor<TResult> typedVisitor = visitor as IQueryVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNested_predicate(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Nested_predicateContext nested_predicate() {
		Nested_predicateContext _localctx = new Nested_predicateContext(Context, State);
		EnterRule(_localctx, 34, RULE_nested_predicate);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 156;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==AND || _la==OR) {
				{
				State = 155; boolean_op();
				}
			}

			State = 158; Match(LPAREN);
			State = 159; predicate();
			State = 164;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << AND) | (1L << OR) | (1L << FIELD) | (1L << LPAREN))) != 0)) {
				{
				State = 162;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,20,Context) ) {
				case 1:
					{
					State = 160; predicate();
					}
					break;
				case 2:
					{
					State = 161; nested_predicate();
					}
					break;
				}
				}
				State = 166;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 167; Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ValueContext : ParserRuleContext {
		public ValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_value; } }
	 
		public ValueContext() { }
		public virtual void CopyFrom(ValueContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class NumberContext : ValueContext {
		public ITerminalNode NUMBER() { return GetToken(QueryParser.NUMBER, 0); }
		public NumberContext(ValueContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IQueryListener typedListener = listener as IQueryListener;
			if (typedListener != null) typedListener.EnterNumber(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IQueryListener typedListener = listener as IQueryListener;
			if (typedListener != null) typedListener.ExitNumber(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryVisitor<TResult> typedVisitor = visitor as IQueryVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumber(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MULTI_PHRASEContext : ValueContext {
		public ITerminalNode MULTI_PHRASE() { return GetToken(QueryParser.MULTI_PHRASE, 0); }
		public MULTI_PHRASEContext(ValueContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IQueryListener typedListener = listener as IQueryListener;
			if (typedListener != null) typedListener.EnterMULTI_PHRASE(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IQueryListener typedListener = listener as IQueryListener;
			if (typedListener != null) typedListener.ExitMULTI_PHRASE(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryVisitor<TResult> typedVisitor = visitor as IQueryVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMULTI_PHRASE(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TermContext : ValueContext {
		public ITerminalNode TERM() { return GetToken(QueryParser.TERM, 0); }
		public TermContext(ValueContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IQueryListener typedListener = listener as IQueryListener;
			if (typedListener != null) typedListener.EnterTerm(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IQueryListener typedListener = listener as IQueryListener;
			if (typedListener != null) typedListener.ExitTerm(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryVisitor<TResult> typedVisitor = visitor as IQueryVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTerm(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PhraseContext : ValueContext {
		public ITerminalNode PHRASE() { return GetToken(QueryParser.PHRASE, 0); }
		public PhraseContext(ValueContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IQueryListener typedListener = listener as IQueryListener;
			if (typedListener != null) typedListener.EnterPhrase(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IQueryListener typedListener = listener as IQueryListener;
			if (typedListener != null) typedListener.ExitPhrase(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryVisitor<TResult> typedVisitor = visitor as IQueryVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPhrase(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DateContext : ValueContext {
		public ITerminalNode DATE() { return GetToken(QueryParser.DATE, 0); }
		public DateContext(ValueContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IQueryListener typedListener = listener as IQueryListener;
			if (typedListener != null) typedListener.EnterDate(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IQueryListener typedListener = listener as IQueryListener;
			if (typedListener != null) typedListener.ExitDate(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryVisitor<TResult> typedVisitor = visitor as IQueryVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDate(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ValueContext value() {
		ValueContext _localctx = new ValueContext(Context, State);
		EnterRule(_localctx, 36, RULE_value);
		try {
			State = 174;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case NUMBER:
				_localctx = new NumberContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 169; Match(NUMBER);
				}
				break;
			case TERM:
				_localctx = new TermContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 170; Match(TERM);
				}
				break;
			case PHRASE:
				_localctx = new PhraseContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 171; Match(PHRASE);
				}
				break;
			case DATE:
				_localctx = new DateContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 172; Match(DATE);
				}
				break;
			case MULTI_PHRASE:
				_localctx = new MULTI_PHRASEContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 173; Match(MULTI_PHRASE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RegexpContext : ParserRuleContext {
		public FieldContext field() {
			return GetRuleContext<FieldContext>(0);
		}
		public ITerminalNode MATCHES() { return GetToken(QueryParser.MATCHES, 0); }
		public ITerminalNode LPAREN() { return GetToken(QueryParser.LPAREN, 0); }
		public ITerminalNode WILD_CARD() { return GetToken(QueryParser.WILD_CARD, 0); }
		public ITerminalNode RPAREN() { return GetToken(QueryParser.RPAREN, 0); }
		public RegexpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_regexp; } }
		public override void EnterRule(IParseTreeListener listener) {
			IQueryListener typedListener = listener as IQueryListener;
			if (typedListener != null) typedListener.EnterRegexp(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IQueryListener typedListener = listener as IQueryListener;
			if (typedListener != null) typedListener.ExitRegexp(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryVisitor<TResult> typedVisitor = visitor as IQueryVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRegexp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RegexpContext regexp() {
		RegexpContext _localctx = new RegexpContext(Context, State);
		EnterRule(_localctx, 38, RULE_regexp);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 176; field();
			State = 177; Match(MATCHES);
			State = 178; Match(LPAREN);
			State = 179; Match(WILD_CARD);
			State = 180; Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LikeContext : ParserRuleContext {
		public FieldContext field() {
			return GetRuleContext<FieldContext>(0);
		}
		public ITerminalNode LIKE() { return GetToken(QueryParser.LIKE, 0); }
		public ITerminalNode WILD_CARD() { return GetToken(QueryParser.WILD_CARD, 0); }
		public LikeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_like; } }
		public override void EnterRule(IParseTreeListener listener) {
			IQueryListener typedListener = listener as IQueryListener;
			if (typedListener != null) typedListener.EnterLike(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IQueryListener typedListener = listener as IQueryListener;
			if (typedListener != null) typedListener.ExitLike(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryVisitor<TResult> typedVisitor = visitor as IQueryVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLike(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LikeContext like() {
		LikeContext _localctx = new LikeContext(Context, State);
		EnterRule(_localctx, 40, RULE_like);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 182; field();
			State = 183; Match(LIKE);
			State = 184; Match(WILD_CARD);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InContext : ParserRuleContext {
		public FieldContext field() {
			return GetRuleContext<FieldContext>(0);
		}
		public ITerminalNode IN() { return GetToken(QueryParser.IN, 0); }
		public Value_listContext value_list() {
			return GetRuleContext<Value_listContext>(0);
		}
		public ITerminalNode NOT() { return GetToken(QueryParser.NOT, 0); }
		public InContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_in; } }
		public override void EnterRule(IParseTreeListener listener) {
			IQueryListener typedListener = listener as IQueryListener;
			if (typedListener != null) typedListener.EnterIn(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IQueryListener typedListener = listener as IQueryListener;
			if (typedListener != null) typedListener.ExitIn(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryVisitor<TResult> typedVisitor = visitor as IQueryVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIn(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InContext @in() {
		InContext _localctx = new InContext(Context, State);
		EnterRule(_localctx, 42, RULE_in);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 186; field();
			State = 188;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==NOT) {
				{
				State = 187; Match(NOT);
				}
			}

			State = 190; Match(IN);
			State = 191; value_list();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Value_listContext : ParserRuleContext {
		public ITerminalNode LPAREN() { return GetToken(QueryParser.LPAREN, 0); }
		public ITerminalNode RPAREN() { return GetToken(QueryParser.RPAREN, 0); }
		public Number_listContext number_list() {
			return GetRuleContext<Number_listContext>(0);
		}
		public Date_listContext date_list() {
			return GetRuleContext<Date_listContext>(0);
		}
		public Term_listContext term_list() {
			return GetRuleContext<Term_listContext>(0);
		}
		public Phrase_listContext phrase_list() {
			return GetRuleContext<Phrase_listContext>(0);
		}
		public Value_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_value_list; } }
		public override void EnterRule(IParseTreeListener listener) {
			IQueryListener typedListener = listener as IQueryListener;
			if (typedListener != null) typedListener.EnterValue_list(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IQueryListener typedListener = listener as IQueryListener;
			if (typedListener != null) typedListener.ExitValue_list(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryVisitor<TResult> typedVisitor = visitor as IQueryVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitValue_list(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Value_listContext value_list() {
		Value_listContext _localctx = new Value_listContext(Context, State);
		EnterRule(_localctx, 44, RULE_value_list);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 193; Match(LPAREN);
			State = 198;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,24,Context) ) {
			case 1:
				{
				State = 194; number_list();
				}
				break;
			case 2:
				{
				State = 195; date_list();
				}
				break;
			case 3:
				{
				State = 196; term_list();
				}
				break;
			case 4:
				{
				State = 197; phrase_list();
				}
				break;
			}
			State = 200; Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Number_listContext : ParserRuleContext {
		public ITerminalNode[] NUMBER() { return GetTokens(QueryParser.NUMBER); }
		public ITerminalNode NUMBER(int i) {
			return GetToken(QueryParser.NUMBER, i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(QueryParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(QueryParser.COMMA, i);
		}
		public Number_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_number_list; } }
		public override void EnterRule(IParseTreeListener listener) {
			IQueryListener typedListener = listener as IQueryListener;
			if (typedListener != null) typedListener.EnterNumber_list(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IQueryListener typedListener = listener as IQueryListener;
			if (typedListener != null) typedListener.ExitNumber_list(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryVisitor<TResult> typedVisitor = visitor as IQueryVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumber_list(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Number_listContext number_list() {
		Number_listContext _localctx = new Number_listContext(Context, State);
		EnterRule(_localctx, 46, RULE_number_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 202; Match(NUMBER);
			State = 207;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 203; Match(COMMA);
				State = 204; Match(NUMBER);
				}
				}
				State = 209;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Date_listContext : ParserRuleContext {
		public ITerminalNode[] DATE() { return GetTokens(QueryParser.DATE); }
		public ITerminalNode DATE(int i) {
			return GetToken(QueryParser.DATE, i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(QueryParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(QueryParser.COMMA, i);
		}
		public Date_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_date_list; } }
		public override void EnterRule(IParseTreeListener listener) {
			IQueryListener typedListener = listener as IQueryListener;
			if (typedListener != null) typedListener.EnterDate_list(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IQueryListener typedListener = listener as IQueryListener;
			if (typedListener != null) typedListener.ExitDate_list(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryVisitor<TResult> typedVisitor = visitor as IQueryVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDate_list(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Date_listContext date_list() {
		Date_listContext _localctx = new Date_listContext(Context, State);
		EnterRule(_localctx, 48, RULE_date_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 210; Match(DATE);
			State = 215;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 211; Match(COMMA);
				State = 212; Match(DATE);
				}
				}
				State = 217;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Term_listContext : ParserRuleContext {
		public ITerminalNode[] TERM() { return GetTokens(QueryParser.TERM); }
		public ITerminalNode TERM(int i) {
			return GetToken(QueryParser.TERM, i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(QueryParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(QueryParser.COMMA, i);
		}
		public Term_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_term_list; } }
		public override void EnterRule(IParseTreeListener listener) {
			IQueryListener typedListener = listener as IQueryListener;
			if (typedListener != null) typedListener.EnterTerm_list(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IQueryListener typedListener = listener as IQueryListener;
			if (typedListener != null) typedListener.ExitTerm_list(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryVisitor<TResult> typedVisitor = visitor as IQueryVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTerm_list(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Term_listContext term_list() {
		Term_listContext _localctx = new Term_listContext(Context, State);
		EnterRule(_localctx, 50, RULE_term_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 218; Match(TERM);
			State = 223;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 219; Match(COMMA);
				State = 220; Match(TERM);
				}
				}
				State = 225;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Phrase_listContext : ParserRuleContext {
		public ITerminalNode[] TERM() { return GetTokens(QueryParser.TERM); }
		public ITerminalNode TERM(int i) {
			return GetToken(QueryParser.TERM, i);
		}
		public ITerminalNode[] PHRASE() { return GetTokens(QueryParser.PHRASE); }
		public ITerminalNode PHRASE(int i) {
			return GetToken(QueryParser.PHRASE, i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(QueryParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(QueryParser.COMMA, i);
		}
		public Phrase_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_phrase_list; } }
		public override void EnterRule(IParseTreeListener listener) {
			IQueryListener typedListener = listener as IQueryListener;
			if (typedListener != null) typedListener.EnterPhrase_list(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IQueryListener typedListener = listener as IQueryListener;
			if (typedListener != null) typedListener.ExitPhrase_list(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryVisitor<TResult> typedVisitor = visitor as IQueryVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPhrase_list(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Phrase_listContext phrase_list() {
		Phrase_listContext _localctx = new Phrase_listContext(Context, State);
		EnterRule(_localctx, 52, RULE_phrase_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 226;
			_la = TokenStream.LA(1);
			if ( !(_la==TERM || _la==PHRASE) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 231;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 227; Match(COMMA);
				State = 228;
				_la = TokenStream.LA(1);
				if ( !(_la==TERM || _la==PHRASE) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				}
				State = 233;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '!', '\xED', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', 
		'\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', '\t', 
		'\xE', '\x4', '\xF', '\t', '\xF', '\x4', '\x10', '\t', '\x10', '\x4', 
		'\x11', '\t', '\x11', '\x4', '\x12', '\t', '\x12', '\x4', '\x13', '\t', 
		'\x13', '\x4', '\x14', '\t', '\x14', '\x4', '\x15', '\t', '\x15', '\x4', 
		'\x16', '\t', '\x16', '\x4', '\x17', '\t', '\x17', '\x4', '\x18', '\t', 
		'\x18', '\x4', '\x19', '\t', '\x19', '\x4', '\x1A', '\t', '\x1A', '\x4', 
		'\x1B', '\t', '\x1B', '\x4', '\x1C', '\t', '\x1C', '\x3', '\x2', '\x5', 
		'\x2', ':', '\n', '\x2', '\x3', '\x2', '\x5', '\x2', '=', '\n', '\x2', 
		'\x3', '\x2', '\x3', '\x2', '\x5', '\x2', '\x41', '\n', '\x2', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\a', '\x3', 
		'H', '\n', '\x3', '\f', '\x3', '\xE', '\x3', 'K', '\v', '\x3', '\x5', 
		'\x3', 'M', '\n', '\x3', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', 
		'\x5', '\x3', '\x5', '\x6', '\x5', 'T', '\n', '\x5', '\r', '\x5', '\xE', 
		'\x5', 'U', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\a', '\x3', 
		'\a', '\x3', '\a', '\a', '\a', '^', '\n', '\a', '\f', '\a', '\xE', '\a', 
		'\x61', '\v', '\a', '\x3', '\b', '\x5', '\b', '\x64', '\n', '\b', '\x3', 
		'\b', '\x3', '\b', '\x5', '\b', 'h', '\n', '\b', '\x3', '\t', '\x3', '\t', 
		'\x3', '\t', '\x3', '\t', '\x3', '\t', '\x5', '\t', 'o', '\n', '\t', '\x3', 
		'\n', '\x3', '\n', '\x3', '\n', '\x5', '\n', 't', '\n', '\n', '\x3', '\v', 
		'\x3', '\v', '\x3', '\f', '\x3', '\f', '\x5', '\f', 'z', '\n', '\f', '\x3', 
		'\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x5', '\r', '\x80', '\n', 
		'\r', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x5', '\xE', 
		'\x86', '\n', '\xE', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', 
		'\xF', '\x5', '\xF', '\x8C', '\n', '\xF', '\x3', '\x10', '\x3', '\x10', 
		'\x3', '\x10', '\x3', '\x10', '\x5', '\x10', '\x92', '\n', '\x10', '\x3', 
		'\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x5', '\x11', '\x98', 
		'\n', '\x11', '\x3', '\x12', '\x3', '\x12', '\x5', '\x12', '\x9C', '\n', 
		'\x12', '\x3', '\x13', '\x5', '\x13', '\x9F', '\n', '\x13', '\x3', '\x13', 
		'\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\a', '\x13', '\xA5', '\n', 
		'\x13', '\f', '\x13', '\xE', '\x13', '\xA8', '\v', '\x13', '\x3', '\x13', 
		'\x3', '\x13', '\x3', '\x14', '\x3', '\x14', '\x3', '\x14', '\x3', '\x14', 
		'\x3', '\x14', '\x5', '\x14', '\xB1', '\n', '\x14', '\x3', '\x15', '\x3', 
		'\x15', '\x3', '\x15', '\x3', '\x15', '\x3', '\x15', '\x3', '\x15', '\x3', 
		'\x16', '\x3', '\x16', '\x3', '\x16', '\x3', '\x16', '\x3', '\x17', '\x3', 
		'\x17', '\x5', '\x17', '\xBF', '\n', '\x17', '\x3', '\x17', '\x3', '\x17', 
		'\x3', '\x17', '\x3', '\x18', '\x3', '\x18', '\x3', '\x18', '\x3', '\x18', 
		'\x3', '\x18', '\x5', '\x18', '\xC9', '\n', '\x18', '\x3', '\x18', '\x3', 
		'\x18', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\a', '\x19', '\xD0', 
		'\n', '\x19', '\f', '\x19', '\xE', '\x19', '\xD3', '\v', '\x19', '\x3', 
		'\x1A', '\x3', '\x1A', '\x3', '\x1A', '\a', '\x1A', '\xD8', '\n', '\x1A', 
		'\f', '\x1A', '\xE', '\x1A', '\xDB', '\v', '\x1A', '\x3', '\x1B', '\x3', 
		'\x1B', '\x3', '\x1B', '\a', '\x1B', '\xE0', '\n', '\x1B', '\f', '\x1B', 
		'\xE', '\x1B', '\xE3', '\v', '\x1B', '\x3', '\x1C', '\x3', '\x1C', '\x3', 
		'\x1C', '\a', '\x1C', '\xE8', '\n', '\x1C', '\f', '\x1C', '\xE', '\x1C', 
		'\xEB', '\v', '\x1C', '\x3', '\x1C', '\x2', '\x2', '\x1D', '\x2', '\x4', 
		'\x6', '\b', '\n', '\f', '\xE', '\x10', '\x12', '\x14', '\x16', '\x18', 
		'\x1A', '\x1C', '\x1E', ' ', '\"', '$', '&', '(', '*', ',', '.', '\x30', 
		'\x32', '\x34', '\x36', '\x2', '\x3', '\x3', '\x2', '\x19', '\x1A', '\x2', 
		'\xF6', '\x2', '\x39', '\x3', '\x2', '\x2', '\x2', '\x4', '\x42', '\x3', 
		'\x2', '\x2', '\x2', '\x6', 'N', '\x3', '\x2', '\x2', '\x2', '\b', 'Q', 
		'\x3', '\x2', '\x2', '\x2', '\n', 'W', '\x3', '\x2', '\x2', '\x2', '\f', 
		'Z', '\x3', '\x2', '\x2', '\x2', '\xE', '\x63', '\x3', '\x2', '\x2', '\x2', 
		'\x10', 'i', '\x3', '\x2', '\x2', '\x2', '\x12', 's', '\x3', '\x2', '\x2', 
		'\x2', '\x14', 'u', '\x3', '\x2', '\x2', '\x2', '\x16', 'y', '\x3', '\x2', 
		'\x2', '\x2', '\x18', '\x7F', '\x3', '\x2', '\x2', '\x2', '\x1A', '\x85', 
		'\x3', '\x2', '\x2', '\x2', '\x1C', '\x8B', '\x3', '\x2', '\x2', '\x2', 
		'\x1E', '\x91', '\x3', '\x2', '\x2', '\x2', ' ', '\x97', '\x3', '\x2', 
		'\x2', '\x2', '\"', '\x9B', '\x3', '\x2', '\x2', '\x2', '$', '\x9E', '\x3', 
		'\x2', '\x2', '\x2', '&', '\xB0', '\x3', '\x2', '\x2', '\x2', '(', '\xB2', 
		'\x3', '\x2', '\x2', '\x2', '*', '\xB8', '\x3', '\x2', '\x2', '\x2', ',', 
		'\xBC', '\x3', '\x2', '\x2', '\x2', '.', '\xC3', '\x3', '\x2', '\x2', 
		'\x2', '\x30', '\xCC', '\x3', '\x2', '\x2', '\x2', '\x32', '\xD4', '\x3', 
		'\x2', '\x2', '\x2', '\x34', '\xDC', '\x3', '\x2', '\x2', '\x2', '\x36', 
		'\xE4', '\x3', '\x2', '\x2', '\x2', '\x38', ':', '\x5', '\x4', '\x3', 
		'\x2', '\x39', '\x38', '\x3', '\x2', '\x2', '\x2', '\x39', ':', '\x3', 
		'\x2', '\x2', '\x2', ':', '<', '\x3', '\x2', '\x2', '\x2', ';', '=', '\x5', 
		'\x6', '\x4', '\x2', '<', ';', '\x3', '\x2', '\x2', '\x2', '<', '=', '\x3', 
		'\x2', '\x2', '\x2', '=', '>', '\x3', '\x2', '\x2', '\x2', '>', '@', '\x5', 
		'\b', '\x5', '\x2', '?', '\x41', '\x5', '\n', '\x6', '\x2', '@', '?', 
		'\x3', '\x2', '\x2', '\x2', '@', '\x41', '\x3', '\x2', '\x2', '\x2', '\x41', 
		'\x3', '\x3', '\x2', '\x2', '\x2', '\x42', 'L', '\a', '\x3', '\x2', '\x2', 
		'\x43', 'M', '\a', '\x14', '\x2', '\x2', '\x44', 'I', '\a', '\x17', '\x2', 
		'\x2', '\x45', '\x46', '\a', '\x1E', '\x2', '\x2', '\x46', 'H', '\a', 
		'\x17', '\x2', '\x2', 'G', '\x45', '\x3', '\x2', '\x2', '\x2', 'H', 'K', 
		'\x3', '\x2', '\x2', '\x2', 'I', 'G', '\x3', '\x2', '\x2', '\x2', 'I', 
		'J', '\x3', '\x2', '\x2', '\x2', 'J', 'M', '\x3', '\x2', '\x2', '\x2', 
		'K', 'I', '\x3', '\x2', '\x2', '\x2', 'L', '\x43', '\x3', '\x2', '\x2', 
		'\x2', 'L', '\x44', '\x3', '\x2', '\x2', '\x2', 'M', '\x5', '\x3', '\x2', 
		'\x2', '\x2', 'N', 'O', '\a', '\x4', '\x2', '\x2', 'O', 'P', '\a', '\x18', 
		'\x2', '\x2', 'P', '\a', '\x3', '\x2', '\x2', '\x2', 'Q', 'S', '\a', '\x5', 
		'\x2', '\x2', 'R', 'T', '\x5', '\f', '\a', '\x2', 'S', 'R', '\x3', '\x2', 
		'\x2', '\x2', 'T', 'U', '\x3', '\x2', '\x2', '\x2', 'U', 'S', '\x3', '\x2', 
		'\x2', '\x2', 'U', 'V', '\x3', '\x2', '\x2', '\x2', 'V', '\t', '\x3', 
		'\x2', '\x2', '\x2', 'W', 'X', '\a', '\f', '\x2', '\x2', 'X', 'Y', '\a', 
		'\x15', '\x2', '\x2', 'Y', '\v', '\x3', '\x2', '\x2', '\x2', 'Z', '_', 
		'\x5', '\xE', '\b', '\x2', '[', '^', '\x5', '\xE', '\b', '\x2', '\\', 
		'^', '\x5', '$', '\x13', '\x2', ']', '[', '\x3', '\x2', '\x2', '\x2', 
		']', '\\', '\x3', '\x2', '\x2', '\x2', '^', '\x61', '\x3', '\x2', '\x2', 
		'\x2', '_', ']', '\x3', '\x2', '\x2', '\x2', '_', '`', '\x3', '\x2', '\x2', 
		'\x2', '`', '\r', '\x3', '\x2', '\x2', '\x2', '\x61', '_', '\x3', '\x2', 
		'\x2', '\x2', '\x62', '\x64', '\x5', '\"', '\x12', '\x2', '\x63', '\x62', 
		'\x3', '\x2', '\x2', '\x2', '\x63', '\x64', '\x3', '\x2', '\x2', '\x2', 
		'\x64', 'g', '\x3', '\x2', '\x2', '\x2', '\x65', 'h', '\x5', '\x10', '\t', 
		'\x2', '\x66', 'h', '\x5', '\x12', '\n', '\x2', 'g', '\x65', '\x3', '\x2', 
		'\x2', '\x2', 'g', '\x66', '\x3', '\x2', '\x2', '\x2', 'h', '\xF', '\x3', 
		'\x2', '\x2', '\x2', 'i', 'n', '\x5', '\x14', '\v', '\x2', 'j', 'k', '\x5', 
		'\x16', '\f', '\x2', 'k', 'l', '\x5', '&', '\x14', '\x2', 'l', 'o', '\x3', 
		'\x2', '\x2', '\x2', 'm', 'o', '\x5', '\x18', '\r', '\x2', 'n', 'j', '\x3', 
		'\x2', '\x2', '\x2', 'n', 'm', '\x3', '\x2', '\x2', '\x2', 'o', '\x11', 
		'\x3', '\x2', '\x2', '\x2', 'p', 't', '\x5', '(', '\x15', '\x2', 'q', 
		't', '\x5', '*', '\x16', '\x2', 'r', 't', '\x5', ',', '\x17', '\x2', 's', 
		'p', '\x3', '\x2', '\x2', '\x2', 's', 'q', '\x3', '\x2', '\x2', '\x2', 
		's', 'r', '\x3', '\x2', '\x2', '\x2', 't', '\x13', '\x3', '\x2', '\x2', 
		'\x2', 'u', 'v', '\a', '\x17', '\x2', '\x2', 'v', '\x15', '\x3', '\x2', 
		'\x2', '\x2', 'w', 'z', '\a', '\r', '\x2', '\x2', 'x', 'z', '\a', '\xE', 
		'\x2', '\x2', 'y', 'w', '\x3', '\x2', '\x2', '\x2', 'y', 'x', '\x3', '\x2', 
		'\x2', '\x2', 'z', '\x17', '\x3', '\x2', '\x2', '\x2', '{', '\x80', '\x5', 
		'\x1A', '\xE', '\x2', '|', '\x80', '\x5', '\x1C', '\xF', '\x2', '}', '\x80', 
		'\x5', '\x1E', '\x10', '\x2', '~', '\x80', '\x5', ' ', '\x11', '\x2', 
		'\x7F', '{', '\x3', '\x2', '\x2', '\x2', '\x7F', '|', '\x3', '\x2', '\x2', 
		'\x2', '\x7F', '}', '\x3', '\x2', '\x2', '\x2', '\x7F', '~', '\x3', '\x2', 
		'\x2', '\x2', '\x80', '\x19', '\x3', '\x2', '\x2', '\x2', '\x81', '\x82', 
		'\a', '\xF', '\x2', '\x2', '\x82', '\x86', '\a', '\x15', '\x2', '\x2', 
		'\x83', '\x84', '\a', '\xF', '\x2', '\x2', '\x84', '\x86', '\a', '\x19', 
		'\x2', '\x2', '\x85', '\x81', '\x3', '\x2', '\x2', '\x2', '\x85', '\x83', 
		'\x3', '\x2', '\x2', '\x2', '\x86', '\x1B', '\x3', '\x2', '\x2', '\x2', 
		'\x87', '\x88', '\a', '\x11', '\x2', '\x2', '\x88', '\x8C', '\a', '\x15', 
		'\x2', '\x2', '\x89', '\x8A', '\a', '\x11', '\x2', '\x2', '\x8A', '\x8C', 
		'\a', '\x19', '\x2', '\x2', '\x8B', '\x87', '\x3', '\x2', '\x2', '\x2', 
		'\x8B', '\x89', '\x3', '\x2', '\x2', '\x2', '\x8C', '\x1D', '\x3', '\x2', 
		'\x2', '\x2', '\x8D', '\x8E', '\a', '\x10', '\x2', '\x2', '\x8E', '\x92', 
		'\a', '\x15', '\x2', '\x2', '\x8F', '\x90', '\a', '\x10', '\x2', '\x2', 
		'\x90', '\x92', '\a', '\x19', '\x2', '\x2', '\x91', '\x8D', '\x3', '\x2', 
		'\x2', '\x2', '\x91', '\x8F', '\x3', '\x2', '\x2', '\x2', '\x92', '\x1F', 
		'\x3', '\x2', '\x2', '\x2', '\x93', '\x94', '\a', '\x12', '\x2', '\x2', 
		'\x94', '\x98', '\a', '\x15', '\x2', '\x2', '\x95', '\x96', '\a', '\x12', 
		'\x2', '\x2', '\x96', '\x98', '\a', '\x19', '\x2', '\x2', '\x97', '\x93', 
		'\x3', '\x2', '\x2', '\x2', '\x97', '\x95', '\x3', '\x2', '\x2', '\x2', 
		'\x98', '!', '\x3', '\x2', '\x2', '\x2', '\x99', '\x9C', '\a', '\x6', 
		'\x2', '\x2', '\x9A', '\x9C', '\a', '\a', '\x2', '\x2', '\x9B', '\x99', 
		'\x3', '\x2', '\x2', '\x2', '\x9B', '\x9A', '\x3', '\x2', '\x2', '\x2', 
		'\x9C', '#', '\x3', '\x2', '\x2', '\x2', '\x9D', '\x9F', '\x5', '\"', 
		'\x12', '\x2', '\x9E', '\x9D', '\x3', '\x2', '\x2', '\x2', '\x9E', '\x9F', 
		'\x3', '\x2', '\x2', '\x2', '\x9F', '\xA0', '\x3', '\x2', '\x2', '\x2', 
		'\xA0', '\xA1', '\a', '\x1F', '\x2', '\x2', '\xA1', '\xA6', '\x5', '\xE', 
		'\b', '\x2', '\xA2', '\xA5', '\x5', '\xE', '\b', '\x2', '\xA3', '\xA5', 
		'\x5', '$', '\x13', '\x2', '\xA4', '\xA2', '\x3', '\x2', '\x2', '\x2', 
		'\xA4', '\xA3', '\x3', '\x2', '\x2', '\x2', '\xA5', '\xA8', '\x3', '\x2', 
		'\x2', '\x2', '\xA6', '\xA4', '\x3', '\x2', '\x2', '\x2', '\xA6', '\xA7', 
		'\x3', '\x2', '\x2', '\x2', '\xA7', '\xA9', '\x3', '\x2', '\x2', '\x2', 
		'\xA8', '\xA6', '\x3', '\x2', '\x2', '\x2', '\xA9', '\xAA', '\a', ' ', 
		'\x2', '\x2', '\xAA', '%', '\x3', '\x2', '\x2', '\x2', '\xAB', '\xB1', 
		'\a', '\x15', '\x2', '\x2', '\xAC', '\xB1', '\a', '\x19', '\x2', '\x2', 
		'\xAD', '\xB1', '\a', '\x1A', '\x2', '\x2', '\xAE', '\xB1', '\a', '\x16', 
		'\x2', '\x2', '\xAF', '\xB1', '\a', '\x1C', '\x2', '\x2', '\xB0', '\xAB', 
		'\x3', '\x2', '\x2', '\x2', '\xB0', '\xAC', '\x3', '\x2', '\x2', '\x2', 
		'\xB0', '\xAD', '\x3', '\x2', '\x2', '\x2', '\xB0', '\xAE', '\x3', '\x2', 
		'\x2', '\x2', '\xB0', '\xAF', '\x3', '\x2', '\x2', '\x2', '\xB1', '\'', 
		'\x3', '\x2', '\x2', '\x2', '\xB2', '\xB3', '\x5', '\x14', '\v', '\x2', 
		'\xB3', '\xB4', '\a', '\n', '\x2', '\x2', '\xB4', '\xB5', '\a', '\x1F', 
		'\x2', '\x2', '\xB5', '\xB6', '\a', '\x1B', '\x2', '\x2', '\xB6', '\xB7', 
		'\a', ' ', '\x2', '\x2', '\xB7', ')', '\x3', '\x2', '\x2', '\x2', '\xB8', 
		'\xB9', '\x5', '\x14', '\v', '\x2', '\xB9', '\xBA', '\a', '\v', '\x2', 
		'\x2', '\xBA', '\xBB', '\a', '\x1B', '\x2', '\x2', '\xBB', '+', '\x3', 
		'\x2', '\x2', '\x2', '\xBC', '\xBE', '\x5', '\x14', '\v', '\x2', '\xBD', 
		'\xBF', '\a', '\b', '\x2', '\x2', '\xBE', '\xBD', '\x3', '\x2', '\x2', 
		'\x2', '\xBE', '\xBF', '\x3', '\x2', '\x2', '\x2', '\xBF', '\xC0', '\x3', 
		'\x2', '\x2', '\x2', '\xC0', '\xC1', '\a', '\x13', '\x2', '\x2', '\xC1', 
		'\xC2', '\x5', '.', '\x18', '\x2', '\xC2', '-', '\x3', '\x2', '\x2', '\x2', 
		'\xC3', '\xC8', '\a', '\x1F', '\x2', '\x2', '\xC4', '\xC9', '\x5', '\x30', 
		'\x19', '\x2', '\xC5', '\xC9', '\x5', '\x32', '\x1A', '\x2', '\xC6', '\xC9', 
		'\x5', '\x34', '\x1B', '\x2', '\xC7', '\xC9', '\x5', '\x36', '\x1C', '\x2', 
		'\xC8', '\xC4', '\x3', '\x2', '\x2', '\x2', '\xC8', '\xC5', '\x3', '\x2', 
		'\x2', '\x2', '\xC8', '\xC6', '\x3', '\x2', '\x2', '\x2', '\xC8', '\xC7', 
		'\x3', '\x2', '\x2', '\x2', '\xC9', '\xCA', '\x3', '\x2', '\x2', '\x2', 
		'\xCA', '\xCB', '\a', ' ', '\x2', '\x2', '\xCB', '/', '\x3', '\x2', '\x2', 
		'\x2', '\xCC', '\xD1', '\a', '\x15', '\x2', '\x2', '\xCD', '\xCE', '\a', 
		'\x1E', '\x2', '\x2', '\xCE', '\xD0', '\a', '\x15', '\x2', '\x2', '\xCF', 
		'\xCD', '\x3', '\x2', '\x2', '\x2', '\xD0', '\xD3', '\x3', '\x2', '\x2', 
		'\x2', '\xD1', '\xCF', '\x3', '\x2', '\x2', '\x2', '\xD1', '\xD2', '\x3', 
		'\x2', '\x2', '\x2', '\xD2', '\x31', '\x3', '\x2', '\x2', '\x2', '\xD3', 
		'\xD1', '\x3', '\x2', '\x2', '\x2', '\xD4', '\xD9', '\a', '\x16', '\x2', 
		'\x2', '\xD5', '\xD6', '\a', '\x1E', '\x2', '\x2', '\xD6', '\xD8', '\a', 
		'\x16', '\x2', '\x2', '\xD7', '\xD5', '\x3', '\x2', '\x2', '\x2', '\xD8', 
		'\xDB', '\x3', '\x2', '\x2', '\x2', '\xD9', '\xD7', '\x3', '\x2', '\x2', 
		'\x2', '\xD9', '\xDA', '\x3', '\x2', '\x2', '\x2', '\xDA', '\x33', '\x3', 
		'\x2', '\x2', '\x2', '\xDB', '\xD9', '\x3', '\x2', '\x2', '\x2', '\xDC', 
		'\xE1', '\a', '\x19', '\x2', '\x2', '\xDD', '\xDE', '\a', '\x1E', '\x2', 
		'\x2', '\xDE', '\xE0', '\a', '\x19', '\x2', '\x2', '\xDF', '\xDD', '\x3', 
		'\x2', '\x2', '\x2', '\xE0', '\xE3', '\x3', '\x2', '\x2', '\x2', '\xE1', 
		'\xDF', '\x3', '\x2', '\x2', '\x2', '\xE1', '\xE2', '\x3', '\x2', '\x2', 
		'\x2', '\xE2', '\x35', '\x3', '\x2', '\x2', '\x2', '\xE3', '\xE1', '\x3', 
		'\x2', '\x2', '\x2', '\xE4', '\xE9', '\t', '\x2', '\x2', '\x2', '\xE5', 
		'\xE6', '\a', '\x1E', '\x2', '\x2', '\xE6', '\xE8', '\t', '\x2', '\x2', 
		'\x2', '\xE7', '\xE5', '\x3', '\x2', '\x2', '\x2', '\xE8', '\xEB', '\x3', 
		'\x2', '\x2', '\x2', '\xE9', '\xE7', '\x3', '\x2', '\x2', '\x2', '\xE9', 
		'\xEA', '\x3', '\x2', '\x2', '\x2', '\xEA', '\x37', '\x3', '\x2', '\x2', 
		'\x2', '\xEB', '\xE9', '\x3', '\x2', '\x2', '\x2', '\x1F', '\x39', '<', 
		'@', 'I', 'L', 'U', ']', '_', '\x63', 'g', 'n', 's', 'y', '\x7F', '\x85', 
		'\x8B', '\x91', '\x97', '\x9B', '\x9E', '\xA4', '\xA6', '\xB0', '\xBE', 
		'\xC8', '\xD1', '\xD9', '\xE1', '\xE9',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
